<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Player_WalkR_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>EffectedByGrav_par</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_fixed_rotation = true;
instance_create(x,y-32,PlayerArm_obj);
effected = true;

image_speed = .3;

State = 1;
/*
0 = Idle 
1 = Right Walk
2 = Left Walk
3 = Jump 
4 = Jump Right
5 = Jump Left
6 = Wall Jump Right
7 = Wall Jump Left
8 = Player Fall Right
9 = Player Fall Left
*/
MoveAction = 0;
/*
-1 = Jumping
0 = Grounded
1 = doubleJumpR
2 = doubleJumpL
3 = Mid Air
4 = Mid Air Cant Jump

*/

//location of the arm
XX = Findx(57,-52);
YY = Findy(57,-52);

Ang = 0;
Ymag = 0;
Xmag = 0;
AA = 0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update location of player's arm and point char in right dir

PlayerArm_obj.x =  Findx(XX,YY);

PlayerArm_obj.y =  Findy(XX,YY);

if (State = 0 or State = 2 or State = 4 or State = 6 or State = 8)
 {PlayerArm_obj.image_yscale = 1;}
  else if (State = 1 or State = 3 or State = 5 or State = 7 or State = 9)
   {PlayerArm_obj.image_yscale = -1;}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlls

//COLLISIONS

//check for collision under player
if ((physics_test_overlap(x,y+2,Ang,Solids_par) &amp;&amp; place_meeting(x,y+2,Solids_par)) or (physics_test_overlap(x,y+1,Ang,EffectedByGrav_par) &amp;&amp; place_meeting(x,y+1,EffectedByGrav_par))) &amp;&amp; MoveAction != -1
{MoveAction = 0;}
else if MoveAction == 0
{MoveAction = 4;}


//MOVEMENT
//Up---------------------------------------------------------------
if (keyboard_check_pressed(ord('W')) &amp;&amp; (MoveAction == 0 or MoveAction == 3))
{ 
    if MoveAction == 0
    { MoveAction = -1; if (State = 0 or State = 2 or State = 4 or State = 6 or State = 8) {State = 4;} else if (State = 1 or State = 3 or State = 5 or State = 7 or State = 9) {State = 5;} YY = 60;}//normal jump
    else if MoveAction = 3
    {MoveAction = 4; phy_speed_y -= 5; if (State = 0 or State = 2 or State = 4 or State = 6 or State = 8) {State = 6;} else if (State = 1 or State = 3 or State = 5 or State = 7 or State = 9) {State = 7;}}//Double Jump
    
}

//Left-------------------------------------------------------------
if keyboard_check(ord('A')) &amp;&amp; !physics_test_overlap(x-5,y-5,0,Solids_par)
{
if phy_speed_x - 5 &gt; -6 {phy_speed_x -= 5;}
else
if phy_speed_x &gt; -6 {phy_speed_x -= 1;}

if MoveAction == 4 // fall
{State = 9;}
else if MoveAction == 3  // air
{State = 7;}
else
 if MoveAction == 0 // ground
{State = 3;}
}

//Right-------------------------------------------------------------
if keyboard_check(ord('D')) &amp;&amp; !physics_test_overlap(x+5,y-5,0,Solids_par)
{
if phy_speed_x + 5 &lt; 6 { phy_speed_x += 5;}
else
if phy_speed_x &lt; 6 { phy_speed_x += 1;}

if MoveAction == 4
{State = 8;}
else if MoveAction == 3 
{State = 6;}
else
 if MoveAction == 0
{State = 2;}
}
//--------------------------------------------------------------------
if MoveAction = 0 &amp;&amp; !(keyboard_check(ord('D')) or keyboard_check(ord('A'))) 
{
if (State = 0 or State = 2 or State = 4 or State = 6 or State = 8) {State = 0;} else if (State = 1 or State = 3 or State = 5 or State = 7 or State = 9) {State = 1;}
}

//jumping
if MoveAction == -1  
{
YY = 70;
if image_index &gt; 4
{
if (State = 0 or State = 2 or State = 4 or State = 6 or State = 8) {State = 0;} else if (State = 1 or State = 3 or State = 5 or State = 7 or State = 9) {State = 1;}; phy_speed_x -= 7*cos(degtorad(Ang+90)); phy_speed_y -= 7*sin(degtorad(Ang+90)); MoveAction = 3;YY = -28;
}
}

//autocorrect player angle while in air
if MoveAction = 1 or MoveAction = 2 or MoveAction = 3 or MoveAction = 4
{Ang = 0; phy_rotation = Ang;}






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Character Animations
switch (State)
{
case 0://IdleR
sprite_index = Player_idleR_spr; YY = 37; XX = 57;
break;

case 1://IdleL
sprite_index = Player_idleL_spr; YY = 37; XX = 57;
break; 

case 2://Walk Right
sprite_index = Player_WalkR_spr; YY = 37; XX = 57;
break; 

case 3://Walk Left
sprite_index = Player_WalkL_spr; YY = 37; XX = 57;
break;

case 4://Jump Right
sprite_index = Player_JumpR_spr; YY = 50; XX = 57;
break; 

case 5://Jump Left
sprite_index = Player_JumpL_spr; YY = 50; XX = 57;
break; 

case 6://Jump Air Right
sprite_index = Player_Jump_AirR_spr; YY = 37; XX = 57;
break; 

case 7://Jump Air Left
sprite_index = Player_Jump_AirL_spr; YY = 37; XX = 57;
break; 

case 8://Fall Right
sprite_index = Player_FallR_spr; YY = 37; XX = 57;
break; 

case 9://Fall Left
sprite_index = Player_FallL_spr; YY = 37; XX = 57;
break; 
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///BlackHole
var Bdist, Bpull, extraBpull
Bpull = 2000;
ExBpull = 2000;

if instance_exists(BlackHole_obj)
{
    ix = instance_nearest(x,y,BlackHole_obj)
    Bdist = point_distance(x, y, ix.x, ix.y);
    if Bdist &gt; 0 extraBpull = 100000/sqr(point_distance(x, y, ix.x, ix.y));
    if extraBpull &gt; ExBpull extraBpull = ExBpull
    
    if Bdist &lt; ix.radius
    {
        physics_apply_force(x, y,
                (Bpull+extraBpull) * cos((point_direction(x, y, ix.x, ix.y)*(pi/180))),
                -(Bpull+extraBpull) * sin((point_direction(x, y, ix.x, ix.y)*(pi/180))));
    }
}











</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///WhiteHole
var Wdist, Wpull, extraWpull
Wpull = -2000;
ExWpull = -2000;

if instance_exists(WhiteHole_obj)
{
    ix = instance_nearest(x,y,WhiteHole_obj)
    Wdist = point_distance(x, y, ix.x, ix.y);
    if Wdist &gt; 0 extraWpull = 100000/sqr(point_distance(x, y, ix.x, ix.y));
    if extraWpull &gt; ExWpull extraWpull = ExWpull
    
    if Wdist &lt; ix.radius
    {
        physics_apply_force(x, y,
                (Wpull+extraWpull) * cos((point_direction(x, y, ix.x, ix.y)*(pi/180))),
                -(Wpull+extraWpull) * sin((point_direction(x, y, ix.x, ix.y)*(pi/180))));
    }
}











</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explosion
var Edist, Epull, extraEpull
Epull = -20000;
ExEpull = -20000;

if instance_exists(Explosion_obj)
{
    ix = instance_nearest(x,y,Explosion_obj)
    Edist = point_distance(x, y, ix.x, ix.y);
    if Edist &gt; 0 extraEpull = 100000/sqr(point_distance(x, y, ix.x, ix.y));
    if extraEpull &gt; ExEpull extraEpull = ExEpull
    
    if Edist &lt; ix.radius
    {
    //apply the force of the gravity field
        physics_apply_force(x, y,
                (Epull+extraEpull) * cos((point_direction(x, y, ix.x, ix.y)*(pi/180))),
                -(Epull+extraEpull) * sin((point_direction(x, y, ix.x, ix.y)*(pi/180))));
    }
  
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update Backgrounds speed
background_hspeed[4] = phy_speed_x/12;
background_hspeed[3] = phy_speed_x/9;
background_hspeed[2] = phy_speed_x/6;
background_hspeed[1] = phy_speed_x/3;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mouse_wheel_up()
AA += 1;
if mouse_wheel_down()
AA -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Floor_par">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !physics_test_overlap(x,y,0,Ramp_par)
{
Ang = 0;
phy_rotation = Ang;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Ramp_par">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !physics_test_overlap(x,y,0,Floor_par)
{
Ang = radtodeg(arctan(other.sprite_height/other.sprite_width));
phy_rotation = Ang;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Solids_par">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Solids

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
draw_text(50,50,string(phy_speed_x)+"x");
draw_text(50,75,string(phy_speed_y)+"y");
draw_text(50,100,string(AA)+"angle");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
//physics_draw_debug();
draw_set_color(c_black);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.0900000035762787</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.00999999977648258</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>50</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>58,0</point>
    <point>78,8</point>
    <point>82,170</point>
    <point>58,178</point>
    <point>34,170</point>
    <point>38,8</point>
  </PhysicsShapePoints>
</object>
