<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Player_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>EffectedByGrav_par</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_fixed_rotation = true;
instance_create(x,y-32,PlayerArm_obj);
effected = true;

image_speed = .2;

State = 0;
/*
0 = Idle
1 = Right Walk
2 = Left Walk
3 = Jump Right
4 = Jump Left

*/
MoveAction = 0;
/*
0 = Grounded
1 = WallJumpR
2 = WallJumpL
3 = Mid Air
4 = Mid Air Cant Jump

*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update location of player's arm and point char in right dir

PlayerArm_obj.x =  x;

PlayerArm_obj.y =  y-50;

var dir = point_direction(x,y,mouse_x,mouse_y);

if dir &gt; 90 &amp;&amp; dir &lt; 270 
{
image_xscale = -1;
}

if dir &gt; 270 or (dir &gt; 0 &amp;&amp; dir &lt; 90)
{
image_xscale = 1;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controlls

//COLLISIONS

//check for collision under player
if physics_test_overlap(x,y-89-2,0,Solids_par)
{MoveAction = 0;}

//check for collision down and to the right of the player
if (MoveAction == 3) &amp;&amp; physics_test_overlap(x+45+2,y-89,0,Solids_par)
{MoveAction = 2}//wall jump to the left}

//check for collision down and to the left of the player
if (MoveAction == 3) &amp;&amp; physics_test_overlap(x-45-2,y-89,0,Solids_par)
{MoveAction = 1;}//wall jump to the right}


//MOVEMENT
//Up---------------------------------------------------------------
if (keyboard_check_pressed(ord('W')) &amp;&amp; (MoveAction == 0 or MoveAction == 1 or MoveAction == 2))
{
    if MoveAction == 0
    {MoveAction = 3;}//normal jump
    else if MoveAction = 1
    {MoveAction = 4;}//wall jump to the right
    else if MoveAction = 2
    {MoveAction = 4;}//wall jump to the left
}

//Left-------------------------------------------------------------
if keyboard_check(ord('A'))
{
State = 2; phy_linear_velocity_x = -5;
}

//Right-------------------------------------------------------------
if keyboard_check(ord('D'))
{
State = 1; phy_linear_velocity_x = 5;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate second gravity source
var dist, pull, extrapull
pull = 200;
Expull = 2000;

if instance_exists(Graviball)
{
    ix = instance_nearest(x,y,Graviball)
    dist = point_distance(x, y, ix.x, ix.y);
    if dist &gt; 0 extrapull = 100000/sqr(point_distance(x, y, ix.x, ix.y));
    if extrapull &gt; Expull extrapull = Expull
    
    if dist &lt; ix.radius
    {
    //disable gravity
    effected = false;
    //apply the force of the gravity field
        physics_apply_force(x, y,
                (pull+extrapull) * cos((point_direction(x, y, ix.x, ix.y)*(pi/180))),
                -(pull+extrapull) * sin((point_direction(x, y, ix.x, ix.y)*(pi/180))));
    }
    else
    {
    effected = true;
    }
}
else
    {
    effected = true;
    }

if phy_linear_velocity_x &lt; 1 &amp;&amp; phy_linear_velocity_x &gt; -1
{sprite_index = Player_idle_spr;}










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Solids_par">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with Solids

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(50,50,string(phy_speed_x)+"x");
draw_text(50,75,string(phy_speed_y)+"y");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
//left
draw_set_color(c_black);
draw_circle(x-90/2-4,y,5,false);

//right
draw_set_color(c_red);
draw_circle(x+90/2+4,y,5,false);





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.0500000007450581</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.00999999977648258</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>50</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,0</point>
    <point>102,0</point>
    <point>102,178</point>
    <point>12,178</point>
  </PhysicsShapePoints>
</object>
